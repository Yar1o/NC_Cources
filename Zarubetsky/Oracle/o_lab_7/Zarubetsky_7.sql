SET PAGESIZE 120;
SET LINESIZE 80;
ALTER SESSION SET NLS_DATE_FORMAT = 'dd/mm/yyyy';
--------------------------------------------------------------------------------
---------------------------------ЧАСТЬ_1----------------------------------------
--------------------------------------------------------------------------------
/* 
1.1 Создать запрос типа INSERT ALL по автоматической регистрации в БД 10000
сотрудников, учитывая следующее:
- для идентификаторов сотрудника использовать значение, сгенерированное
иерархическим запросом ( значение генератора);
- имя, фамилия сотрудника определяется как Ваше имя, фамилия + значение
генератора;
- E-mail сотрудника определяется как Ваше имя + значение генератора;
- дата зачисления определяется как ‘01.01.2000’ + значение генератора;
- должность = «Finance Manager»;
- остальные значения колонок оставить NULL. 
*/

INSERT ALL
    INTO employees (  employee_id,
                      first_name,
                      last_name,
                      email,
                      hire_date,
                      job_id
                    )
    VALUES( 207 + rn,
            'Jaroslav' || rn,
            'Zarubetsky' || rn,
            'Jaroslav' || rn,
            to_date('01.01.2000', 'DD.MM.YYYY')+ rn,
            'FI_MGR'
            )
    SELECT ROWNUM AS rn FROM dual
    CONNECT BY LEVEL <= 100;
ROLLBACK;
/*
100 rows inserted.
rollback complete.
*/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
/*
1.2 Предыдущее решение позволяет создавать простые генераторы.
Отменить операцию внесения данных предыдущего задания.
Создать анонимный PL/SQL-блок, автоматически регистрирующий в БД 10000
сотрудников, учитывая условия из задания 1.1. 
*/
DECLARE 
    i number; 
BEGIN 
    i:=1; 
LOOP 
INSERT 
INTO employees (  employee_id, 
                  first_name, 
                  last_name, 
                  email, 
                  hire_date, 
                  job_id 
               ) 
VALUES( i+207, 
        'Jaroslav' || TO_CHAR(i), 
        'Zarubetshy' || TO_CHAR(i), 
        'Jaroslav'|| TO_CHAR(i), 
        to_date('01.01.2015','DD.MM.YYYY')+i, 
        'FI_MGR'); 
i := i + 1; 
EXIT WHEN i = 10000; 
END LOOP; 
END; 
/
COMMIT;
/*
anonymous block completed
committed.
*/
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
/*
Задание 2 Обработка исключений
В решение задания 1.2 добавить контроль ограничений целостности:
- внесения дубликатов по E-mail сотрудников, нарушающих ограничение целостности
UNIQUE, с выводом ошибки, например, “ E-mail Ivanov already exists!”;
- внесения несуществующей должности с выводом ошибки, например, “Job = Student
is incorrect job! ”
Для проверки срабатывания созданных исключений последовательно выполнить
PL/SQL-блок, вносящий:
1) те же E-mail, что и при выполнении задания 1.2;
2) любую несуществующую должность.
*/





